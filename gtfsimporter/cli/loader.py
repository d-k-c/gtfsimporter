
import argparse
import pickle

from ..common_elements import Schedule

from ..gtfs.importer import GTFSImporter
from ..osm.overpass import OverpassImporter


class DatadirGtfsLoader(object):

    @classmethod
    def load_gtfs_datadir(cls, datadir, route_ids=None, unique_trips=True, shapes=False):
        if datadir is None:
            print("Directory with GTFS files must be specified")
            return

        loader = GTFSImporter(datadir)
        schedule = loader.load(route_ids, unique_trips=unique_trips,
                               shapes=shapes)
        schedule.remove_truncated_trips()

        return schedule

    @classmethod
    def load_only_stops(cls, datadir):
        loader = GTFSImporter(datadir)

        schedule = loader.load_stops()

        return schedule

    @classmethod
    def load_from_args(cls, args):
        if args.gtfs_datadir:
            return cls.load_gtfs_datadir(args.gtfs_datadir)
        else:
            raise AttributeError("--gtfs-datadir must be set")

    @classmethod
    def setup_arguments(cls, parser, subparsers, required=False):
        parser.add_argument(
            "--gtfs-datadir",
            required=required,
            help="directory containing GTFS files")


class PickleGtfsLoader(object):

    @classmethod
    def load_gtfs_pickle(cls, gtfs_pickle):
        with open(gtfs_pickle, 'rb') as f:
            gtfs_schedule = pickle.load(f)

        return gtfs_schedule

    @classmethod
    def load_from_args(cls, args):
        if args.gtfs_pickle:
            return cls.load_pickled_gtfs(args.gtfs_pickle)
        else:
            raise AttributeError("--gtfs-pickle must be set")

    @classmethod
    def setup_arguments(cls, parser, subparsers):
        parser.add_argument(
            "--gtfs-pickle",
            help="GTFS pickle file, generated by 'cache pickle-gtfs'")


class GtfsLoader(object):

    @classmethod
    def load_from_args(cls, args):
        if args.gtfs_pickle:
            return PickleGtfsLoader.load_gtfs_pickle(args.gtfs_pickle)
        elif args.gtfs_datadir:
            return DatadirGtfsLoader.load_gtfs_datadir(args.gtfs_datadir)
        else:
            raise AttributeError("--gtfs-datadir or --gtfs-pickle must be set")

    @classmethod
    def load_only_stops(cls, args):
        if args.gtfs_pickle:
            return PickleGtfsLoader.load_gtfs_pickle(args.gtfs_pickle)
        elif args.gtfs_datadir:
            return DatadirGtfsLoader.load_only_stops(args.gtfs_datadir)
        else:
            raise AttributeError("--gtfs-datadir or --gtfs-pickle must be set")

    @classmethod
    def setup_arguments(cls, parser, subparsers, required=True):
        group = parser.add_mutually_exclusive_group(required=required)
        DatadirGtfsLoader.setup_arguments(group, subparsers)
        PickleGtfsLoader.setup_arguments(group, subparsers)


class XmlOsmLoader(object):

    @classmethod
    def load_from_args(cls, args):
        loader = OverpassImporter(None)

        if args.osm_xml is None:
            print("OSM XML file must be specified")
            return

        xml = args.osm_xml.read()

        osm_schedule = Schedule()
        loader.load_routes(osm_schedule, xml)

        return osm_schedule


    @classmethod
    def setup_arguments(cls, parser, subparsers):
        parser.add_argument(
            "--osm-xml",
            type=argparse.FileType(),
            help="OSM XML file")



class PickleOsmLoader(object):

    @classmethod
    def load_osm_pickle(cls, osm_pickle):
        with open(osm_pickle, 'rb') as f:
            osm_schedule = pickle.load(f)

        return osm_schedule

    @classmethod
    def load_from_args(cls, args):
        if args.osm_pickle:
            return cls.load_osm_pickle(args.osm_pickle)
        else:
            raise AttributeError("--osm-pickle must be set")

    @classmethod
    def setup_arguments(cls, parser, subparsers):
        parser.add_argument(
            "--osm-pickle",
            help="OSM pickle file, generated by 'cache pickle-osm'")


class OsmLoader(object):

    @classmethod
    def load_from_args(cls, args):
        if args.osm_pickle:
            return PickleOsmLoader.load_from_args(args)
        elif args.osm_xml:
            return XmlOsmLoader.load_from_args(args)
        else:
            raise AttributeError("--osm-xml or --osm-pickle must be set")

    @classmethod
    def setup_arguments(cls, parser, subparsers):
        group = parser.add_mutually_exclusive_group(required=True)
        XmlOsmLoader.setup_arguments(group, subparsers)
        PickleOsmLoader.setup_arguments(group, subparsers)


class SchedulesLoader(object):

    @classmethod
    def load_from_args(cls, args):
        gtfs = GtfsLoader.load_from_args(args)
        osm = OsmLoader.load_from_args(args)

        return gtfs, osm

    @classmethod
    def load_only_stops(cls, args):
        gtfs = GtfsLoader.load_only_stops(args)
        osm = OsmLoader.load_from_args(args)

        return gtfs, osm

    @classmethod
    def setup_arguments(cls, parser, subparsers):
        GtfsLoader.setup_arguments(parser, subparsers)
        OsmLoader.setup_arguments(parser, subparsers)
